// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: ram_generator.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RamGeneratorClient is the client API for RamGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RamGeneratorClient interface {
	GenerateStartPrompt(ctx context.Context, in *GenerateStartPromptRequest, opts ...grpc.CallOption) (*ImagePrompt, error)
	GenerateHybridPrompt(ctx context.Context, in *GenerateHybridPromptRequest, opts ...grpc.CallOption) (*ImagePrompt, error)
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
}

type ramGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewRamGeneratorClient(cc grpc.ClientConnInterface) RamGeneratorClient {
	return &ramGeneratorClient{cc}
}

func (c *ramGeneratorClient) GenerateStartPrompt(ctx context.Context, in *GenerateStartPromptRequest, opts ...grpc.CallOption) (*ImagePrompt, error) {
	out := new(ImagePrompt)
	err := c.cc.Invoke(ctx, "/ram_generator.RamGenerator/GenerateStartPrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ramGeneratorClient) GenerateHybridPrompt(ctx context.Context, in *GenerateHybridPromptRequest, opts ...grpc.CallOption) (*ImagePrompt, error) {
	out := new(ImagePrompt)
	err := c.cc.Invoke(ctx, "/ram_generator.RamGenerator/GenerateHybridPrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ramGeneratorClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, "/ram_generator.RamGenerator/GenerateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RamGeneratorServer is the server API for RamGenerator service.
// All implementations must embed UnimplementedRamGeneratorServer
// for forward compatibility
type RamGeneratorServer interface {
	GenerateStartPrompt(context.Context, *GenerateStartPromptRequest) (*ImagePrompt, error)
	GenerateHybridPrompt(context.Context, *GenerateHybridPromptRequest) (*ImagePrompt, error)
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	mustEmbedUnimplementedRamGeneratorServer()
}

// UnimplementedRamGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedRamGeneratorServer struct {
}

func (UnimplementedRamGeneratorServer) GenerateStartPrompt(context.Context, *GenerateStartPromptRequest) (*ImagePrompt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStartPrompt not implemented")
}
func (UnimplementedRamGeneratorServer) GenerateHybridPrompt(context.Context, *GenerateHybridPromptRequest) (*ImagePrompt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHybridPrompt not implemented")
}
func (UnimplementedRamGeneratorServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedRamGeneratorServer) mustEmbedUnimplementedRamGeneratorServer() {}

// UnsafeRamGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RamGeneratorServer will
// result in compilation errors.
type UnsafeRamGeneratorServer interface {
	mustEmbedUnimplementedRamGeneratorServer()
}

func RegisterRamGeneratorServer(s grpc.ServiceRegistrar, srv RamGeneratorServer) {
	s.RegisterService(&RamGenerator_ServiceDesc, srv)
}

func _RamGenerator_GenerateStartPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStartPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RamGeneratorServer).GenerateStartPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ram_generator.RamGenerator/GenerateStartPrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RamGeneratorServer).GenerateStartPrompt(ctx, req.(*GenerateStartPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RamGenerator_GenerateHybridPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateHybridPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RamGeneratorServer).GenerateHybridPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ram_generator.RamGenerator/GenerateHybridPrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RamGeneratorServer).GenerateHybridPrompt(ctx, req.(*GenerateHybridPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RamGenerator_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RamGeneratorServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ram_generator.RamGenerator/GenerateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RamGeneratorServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RamGenerator_ServiceDesc is the grpc.ServiceDesc for RamGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RamGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ram_generator.RamGenerator",
	HandlerType: (*RamGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateStartPrompt",
			Handler:    _RamGenerator_GenerateStartPrompt_Handler,
		},
		{
			MethodName: "GenerateHybridPrompt",
			Handler:    _RamGenerator_GenerateHybridPrompt_Handler,
		},
		{
			MethodName: "GenerateImage",
			Handler:    _RamGenerator_GenerateImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ram_generator.proto",
}
