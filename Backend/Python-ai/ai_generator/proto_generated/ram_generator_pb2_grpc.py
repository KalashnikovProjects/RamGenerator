# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ram_generator_pb2 as ram__generator__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ram_generator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RamGeneratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateStartPrompt = channel.unary_unary(
                '/ram_generator.RamGenerator/GenerateStartPrompt',
                request_serializer=ram__generator__pb2.GenerateStartPromptRequest.SerializeToString,
                response_deserializer=ram__generator__pb2.RamImagePrompt.FromString,
                _registered_method=True)
        self.GenerateHybridPrompt = channel.unary_unary(
                '/ram_generator.RamGenerator/GenerateHybridPrompt',
                request_serializer=ram__generator__pb2.GenerateHybridPromptRequest.SerializeToString,
                response_deserializer=ram__generator__pb2.RamImagePrompt.FromString,
                _registered_method=True)
        self.GenerateImage = channel.unary_unary(
                '/ram_generator.RamGenerator/GenerateImage',
                request_serializer=ram__generator__pb2.GenerateImageRequest.SerializeToString,
                response_deserializer=ram__generator__pb2.RamImage.FromString,
                _registered_method=True)
        self.GenerateDescription = channel.unary_unary(
                '/ram_generator.RamGenerator/GenerateDescription',
                request_serializer=ram__generator__pb2.RamImageUrl.SerializeToString,
                response_deserializer=ram__generator__pb2.RamDescription.FromString,
                _registered_method=True)


class RamGeneratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateStartPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateHybridPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RamGeneratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateStartPrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateStartPrompt,
                    request_deserializer=ram__generator__pb2.GenerateStartPromptRequest.FromString,
                    response_serializer=ram__generator__pb2.RamImagePrompt.SerializeToString,
            ),
            'GenerateHybridPrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateHybridPrompt,
                    request_deserializer=ram__generator__pb2.GenerateHybridPromptRequest.FromString,
                    response_serializer=ram__generator__pb2.RamImagePrompt.SerializeToString,
            ),
            'GenerateImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateImage,
                    request_deserializer=ram__generator__pb2.GenerateImageRequest.FromString,
                    response_serializer=ram__generator__pb2.RamImage.SerializeToString,
            ),
            'GenerateDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateDescription,
                    request_deserializer=ram__generator__pb2.RamImageUrl.FromString,
                    response_serializer=ram__generator__pb2.RamDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ram_generator.RamGenerator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ram_generator.RamGenerator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RamGenerator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateStartPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ram_generator.RamGenerator/GenerateStartPrompt',
            ram__generator__pb2.GenerateStartPromptRequest.SerializeToString,
            ram__generator__pb2.RamImagePrompt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateHybridPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ram_generator.RamGenerator/GenerateHybridPrompt',
            ram__generator__pb2.GenerateHybridPromptRequest.SerializeToString,
            ram__generator__pb2.RamImagePrompt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ram_generator.RamGenerator/GenerateImage',
            ram__generator__pb2.GenerateImageRequest.SerializeToString,
            ram__generator__pb2.RamImage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ram_generator.RamGenerator/GenerateDescription',
            ram__generator__pb2.RamImageUrl.SerializeToString,
            ram__generator__pb2.RamDescription.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
