services:
  nginx:
    image: kalashnik/ramgenerator-nginx:latest
    build:
      context: .nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - go-api
      - go-static-server
      - swagger
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 60s
      start_interval: 5s
    restart: unless-stopped

  swagger:
    hostname: swagger
    image: kalashnik/ramgenerator-swagger:latest
    build:
      context: swagger
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 60s
      start_interval: 5s
    restart: unless-stopped

  postgres:
    image: postgres:16
    hostname: postgres
    container_name: my_postgres
    env_file:
      - .env
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  go-api:
    hostname: api
    image: kalashnik/ramgenerator-go-api:latest
    build:
      context: /
      dockerfile: Backend/Go-api/Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_HOST: "postgres:5432"
      GRPC_HOST: "python-ai:50051"
    ports:
      - "8082:8082"
    depends_on:
      - python-ai
      - postgres
    restart: unless-stopped

  go-static-server:
    hostname: static-server
    image: kalashnik/ramgenerator-go-static-server:latest
    build:
      context: /
      dockerfile: Backend/Go-static-server/Dockerfile
    environment:
      API_URL: "http://localhost:8082/api"
      WEBSOCKET_PROTOCOL: "ws"
    ports:
      - "8081:8081"
    restart: unless-stopped

  python-ai:
    hostname: pygrpc
    image: kalashnik/ramgenerator-python-ai:latest
    build:
      context: /
      dockerfile: Backend/Python-ai/Dockerfile
    env_file:
      - .env
    environment:
      GRPC_PORT: 50051
    ports:
      - "50051:50051"
    restart: unless-stopped

volumes:
  postgres:
